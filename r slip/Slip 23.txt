Q.1.A

 Write a java program to check whether given file is hidden or not. If not then display its path, otherwise display appropriate    message.                                                                   

 

import java.io.File;

 

public class FileHiddenCheck {

    public static void main(String[] args) {

        String filePath = "path_to_your_file_here"; // Replace with the file path you want to check

 

        File file = new File(filePath);

 

        if (file.exists()) {

            if (file.isHidden()) {

                System.out.println("The file is hidden.");

            } else {

                System.out.println("File path: " + file.getAbsolutePath());

            }

        } else {

            System.out.println("The specified file does not exist.");

        }

    }

}

Q.1.B


Write a java program to design following Frame using Swing.

import javax.swing.*;

import java.awt.event.ActionEvent;

import java.awt.event.ActionListener;

 

public class SwingMenuExample {

    public static void main(String[] args) {

        JFrame frame = new JFrame("Menu Example");

        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        frame.setSize(400, 300);

 

        // Create a menu bar

        JMenuBar menuBar = new JMenuBar();

 

        // Create "File" menu

        JMenu fileMenu = new JMenu("File");

        JMenuItem exitMenuItem = new JMenuItem("Exit");

        exitMenuItem.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {

                System.exit(0);

            }

        });

        fileMenu.add(exitMenuItem);

 

        // Create "Edit" menu with submenus

        JMenu editMenu = new JMenu("Edit");

        JMenuItem undoMenuItem = new JMenuItem("Undo");

        JMenuItem redoMenuItem = new JMenuItem("Redo");

        JMenuItem cutMenuItem = new JMenuItem("Cut");

        JMenuItem copyMenuItem = new JMenuItem("Copy");

        JMenuItem pasteMenuItem = new JMenuItem("Paste");

        editMenu.add(undoMenuItem);

        editMenu.add(redoMenuItem);

        editMenu.addSeparator(); // Separator

        editMenu.add(cutMenuItem);

        editMenu.add(copyMenuItem);

        editMenu.add(pasteMenuItem);

 

        // Create "Search" menu

        JMenu searchMenu = new JMenu("Search");

 

        // Add menus to the menu bar

        menuBar.add(fileMenu);

        menuBar.add(editMenu);

        menuBar.add(searchMenu);

 

        frame.setJMenuBar(menuBar);

 

        frame.setVisible(true);

    }

}


Q.2.A

A) Write a Python GUI program to create a label and change the label font style
(font name, bold, size) using tkinter module.
import tkinter as tk
from tkinter import font
def change_font_style():
 new_font = font.nametofont(font_name.get())
 new_font.configure(size=font_size.get(), weight=font_bold.get())
 label.config(font=new_font)
# Create the main window
root = tk.Tk()
root.title("Label Font Changer")
# Create a Label
label = tk.Label(root, text="Hello, tkinter!")
label.pack(pady=20)
# Create font selection options
font_name_label = tk.Label(root, text="Font Name:")
font_name_label.pack()
font_name = tk.StringVar()
font_name.set("Arial")
font_name_entry = tk.Entry(root, textvariable=font_name)
font_name_entry.pack()
font_size_label = tk.Label(root, text="Font Size:")
font_size_label.pack()
font_size = tk.IntVar()
font_size.set(12)
font_size_entry = tk.Entry(root, textvariable=font_size)
font_size_entry.pack()
font_bold_label = tk.Label(root, text="Font Bold:")
font_bold_label.pack()
font_bold = tk.StringVar()
font_bold.set("normal")
font_bold_entry = tk.Entry(root, textvariable=font_bold)
font_bold_entry.pack()
# Button to change font style
change_font_button = tk.Button(root, text="Change Font Style",
command=change_font_style)
change_font_button.pack()
root.mainloop()


Q.2.B


B) Create a class circles having members radius. Use operator overloading to add
the radius of two circle objects. Also display the area of circle.
import math
class Circle:
 def __init__(self, radius):
 self.radius = radius
 def __add__(self, other):
 if isinstance(other, Circle):
 return Circle(self.radius + other.radius)
 else:
 return NotImplemented
 def area(self):
 return math.pi * self.radius**2
 def display_area(self):
 print(f"Circle with radius {self.radius} has an area of {self.area():.2f}")
# Creating two Circle objects
circle1 = Circle(5)
circle2 = Circle(3)
# Adding the radii of two circles using operator overloading
resulting_circle = circle1 + circle2
# Displaying the area of the resulting circle
resulting_circle.display_area()
