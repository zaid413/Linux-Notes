Write a java program to accept a number from the user, if number is zero then  throw user defined Exception “Number is 0” otherwise calculate the sum of first and last digit of a given number (Use static keyword).


import java.util.*;
class ZeroException extends Exception
{
ZeroException()
{
super("Number is 0");
}
}
class Slip19
{
static int n;
public static void main(String args[])
{
int i,rem,sum=0;
try
{
Scanner sr=new Scanner(System.in);
n=sr.nextInt();
if(n==0)
{
throw new ZeroException();
}
else
{
rem=n%10;
sum=sum+rem;
if(n>9)
{
while(n>0)
{
rem=n%10;
n=n/10;
}
sum=sum+rem;
}
System.out.println("Sum is: "+sum);
}
}
catch(ZeroException e)
{
System.out.println(e);
}
}
}

Q.1.B

import java.io.*;

public class Matrix{ 

public static void main(String args[]){ 

//creating a matrix 

int original[][]={{10,30,40},{20,40,30},{30,40,50}};   

   

//creating another matrix to store transpose of a matrix 

int transpose[][]=new int[3][3];  //3 rows and 3 columns 

   

//Code to transpose a matrix 

for(int i=0;i<3;i++){   

for(int j=0;j<3;j++){   

transpose[i][j]=original[j][i]; 

}   

}   

 

System.out.println("Printing Matrix without transpose:"); 

for(int i=0;i<3;i++){   

for(int j=0;j<3;j++){   

System.out.print(original[i][j]+" ");   

}   

System.out.println();//new line   

}   

System.out.println("Printing Matrix After Transpose:"); 

for(int i=0;i<3;i++){   

for(int j=0;j<3;j++){   

System.out.print(transpose[i][j]+" ");   

}   

System.out.println();//new line   

}   

}} 

 

 

Output

 

C:\Program Files\Java\jdk1.7.0_80\bin>javac Matrix.java

 

C:\Program Files\Java\jdk1.7.0_80\bin>java Matrix

Printing Matrix without transpose:

10 30 40

20 40 30

30 40 50

Printing Matrix After Transpose:

10 20 30

30 40 40

40 30 50

 

C:\Program Files\Java\jdk1.7.0_80\bin>



Q.2.A

A) Write python script using package to calculate area and volume of cube
and sphere.
import math
def cube_area_volume(side_length):
 cube_area = 6 * side_length ** 2
 cube_volume = side_length ** 3
 return cube_area, cube_volume
def sphere_area_volume(radius):
 sphere_area = 4 * math.pi * radius ** 2
 sphere_volume = (4/3) * math.pi * radius ** 3
 return sphere_area, sphere_volume
cube_side_length = 5
sphere_radius = 3
cube_area, cube_volume = cube_area_volume(cube_side_length)
sphere_area, sphere_volume = sphere_area_volume(sphere_radius)
print("Cube with side length",cube_side_length)
print("Area:",cube_area)
print("Volume:",cube_volume)
print("Sphere with radius",sphere_radius)
print("Surface Area:",sphere_area)
print("Volume:",sphere_volume)


Q.2.B

B) Write a Python GUI program to create a label and change the label font
style (font name, bold, size). Specify separate check button for each style.
import tkinter as tk
from tkinter import font
def update_label_font():
 new_font = f"{font_name.get()} {'bold' if is_bold.get() else ''} {font_size.get()}"
 label.config(font=(new_font))
# Create the main application window
app = tk.Tk()
app.title("Label Font Changer")
# Create a Label widget
label = tk.Label(app, text="Change My Font", font=("Arial", 12))
label.pack(pady=20)
# Font Name
font_name_label = tk.Label(app, text="Font Name:")
font_name_label.pack()
font_name = tk.StringVar()
font_name.set("Arial")
font_name_entry = tk.Entry(app, textvariable=font_name)
font_name_entry.pack()
font_name_button = tk.Button(app, text="Apply", command=update_label_font)
font_name_button.pack()
# Bold
bold_label = tk.Label(app, text="Bold:")
bold_label.pack()
is_bold = tk.BooleanVar()
is_bold.set(False)
bold_checkbutton = tk.Checkbutton(app, variable=is_bold, text="Bold",
command=update_label_font)
bold_checkbutton.pack()
# Font Size
font_size_label = tk.Label(app, text="Font Size:")
font_size_label.pack()
font_size = tk.StringVar()
font_size.set(12)
font_size_entry = tk.Entry(app, textvariable=font_size)
font_size_entry.pack()
font_size_button = tk.Button(app, text="Apply", command=update_label_font)
font_size_button.pack()
app.mainloop()
