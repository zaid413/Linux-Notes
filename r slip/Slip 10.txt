Q.1.A

Write a java program to count the frequency of each character in a given string.

import java.util.HashMap;

import java.util.Map;

import java.io.*;

 

public class CharacterFrequencyCounter {

    public static void main(String[] args) {

        String inputString = "Hello, World!";

       

        // Create a HashMap to store character frequencies

        Map<Character, Integer> charFrequencyMap = new HashMap<>();

       

        // Iterate through the characters in the string

        for (char c : inputString.toCharArray()) {

            if (charFrequencyMap.containsKey(c)) {

                // Character already exists in the map, increment the count

                charFrequencyMap.put(c, charFrequencyMap.get(c) + 1);

            } else {

                // Character does not exist in the map, add it with a count of 1

                charFrequencyMap.put(c, 1);

            }

        }

       

        // Print the character frequencies

        for (Map.Entry<Character, Integer> entry : charFrequencyMap.entrySet()) {

            System.out.println("Character: " + entry.getKey() + ", Frequency: " + entry.getValue());

        }

    }

}

Q.2.B

Write a java program to calculate Total amount and Interest amount Using textbox,label and 3 button for Calculate Button ,Clear Button ,Close Button.

 

import java.awt.*;

import java.awt.event.*;

 

public class InterestCalculatorAWT extends Frame {

    private TextField p, r, time1, total, interestAmount;

    private Button calculate, clear, close;

 

    public InterestCalculatorAWT() {

        setTitle("Interest Calculator");

        setSize(400, 200);

        setLayout(null);

 

        Label l1 = new Label("Principal Amount:");

        l1.setBounds(20, 30, 120, 20);

        add(l1);

 

        p = new TextField();

        p.setBounds(160, 30, 200, 20);

        add(p);

 

        Label r1 = new Label("Rate of Interest (%):");

        r1.setBounds(20, 60, 120, 20);

        add(r1);

 

        r = new TextField();

        r.setBounds(160, 60, 200, 20);

        add(r);

 

        Label l3 = new Label("Time (years):");

        l3.setBounds(20, 90, 120, 20);

        add(l3);

 

        time1 = new TextField();

        time1.setBounds(160, 90, 200, 20);

        add(time1);

 

        calculate = new Button("Calculate");

        calculate.setBounds(20, 120, 100, 30);

        add(calculate);

 

        clear = new Button("Clear");

        clear.setBounds(140, 120, 100, 30);

        add(clear);

 

        close = new Button("Close");

        close.setBounds(260, 120, 100, 30);

        add(close);

 

        total = new TextField();

        total.setBounds(20, 160, 340, 20);

        total.setEditable(false);

        add(total);

 

        interestAmount = new TextField();

        interestAmount.setBounds(20, 190, 340, 20);

        interestAmount.setEditable(false);

        add(interestAmount);

 

        calculate.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {

                calculate();

            }

        });

 

        clear.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {

                clear();

            }

        });

 

        close.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {

                System.exit(0);

            }

        });

 

        addWindowListener(new WindowAdapter() {

            public void windowClosing(WindowEvent we) {

                dispose();

            }

        });

 

        setVisible(true);

    }

 

    private void calculate() {

        try {

            double principal = Double.parseDouble(p.getText());

            double rate = Double.parseDouble(r.getText());

            double time = Double.parseDouble(time1.getText());

 

            double interest = (principal * rate * time) / 100;

            double totalAmount = principal + interest;

 

            total.setText("Total Amount: " + totalAmount);

            interestAmount.setText("Interest Amount: " + interest);

        } catch (NumberFormatException e) {

            // Handle invalid input

            total.setText("Invalid input");

            interestAmount.setText("Invalid input");

        }

    }

 

    private void clear() {

        p.setText("");

        r.setText("");

        time1.setText("");

        total.setText("");

        interestAmount.setText("");

    }

 

    public static void main(String[] args) {

        new InterestCalculatorAWT();

    }

}


Q.2.A

A) Write Python GUI program to display an alert message when a button is
pressed.
from tkinter import *
from tkinter import messagebox
def clicked():
 messagebox.showinfo('Button','Button is pressed.')
root=Tk()
root.geometry('300x200')
word= Label(root,text='messagebox from button')
Button1=Button(root,text='BUTTON',command=clicked)
word.pack()
Button1.pack()
root.mainloop()


Q.1.B


B) Write a Python class to find validity of a string of parentheses, '(', ')', '{', '}',
'[' ']â€™.
These brackets must be close in the correct order. for example "()" and
"()[]{}" are
valid but "[)", "({[)]" and "{{{" are invalid.
class py_solution:
 def is_valid_parenthese(self, str1):
 stack, pchar = [], {"(": ")", "{": "}", "[": "]"}
 for parenthese in str1:
 if parenthese in pchar:
 stack.append(parenthese)
 elif len(stack) == 0 or pchar[stack.pop()] != parenthese:
 return False
 return len(stack) == 0
print(py_solution().is_valid_parenthese("(){}[]"))
print(py_solution().is_valid_parenthese("()[{)}"))
print(py_solution().is_valid_parenthese("()"))