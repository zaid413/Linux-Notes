import java.io.File;
public class Slip19 {
    public static void main(String[] args) {
        String filePath = "C:/Users/Desktop/practcal/qw.txt";
        File file = new File(filePath);
        if (file.isHidden()) {
            System.out.println("The file is hidden.");
        } else {
            System.out.println("The file is not hidden.");
            System.out.println("File path: " + file.getAbsolutePath());
        }
    }
}


import javax.swing.*;
public class Slip19 {
    public static void main(String[] args) {
        JFrame frame = new JFrame("Swing Menu Example");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(400, 300);
        JMenuBar menuBar = new JMenuBar();
        JMenu fileMenu = new JMenu("File");
        JMenuItem newMenuItem = new JMenuItem("New", new ImageIcon(new ImageIcon("new_icon.png").getImage().getScaledInstance(16, 16, java.awt.Image.SCALE_SMOOTH)));
        JMenuItem openMenuItem = new JMenuItem("Open", new ImageIcon(new ImageIcon("open_icon.png").getImage().getScaledInstance(16, 16, java.awt.Image.SCALE_SMOOTH)));
        JMenuItem saveMenuItem = new JMenuItem("Save", new ImageIcon(new ImageIcon("save_icon.png").getImage().getScaledInstance(16, 16, java.awt.Image.SCALE_SMOOTH)));
        JMenuItem closeMenuItem = new JMenuItem("Close", new ImageIcon(new ImageIcon("close_icon.png").getImage().getScaledInstance(16, 16, java.awt.Image.SCALE_SMOOTH)));
        fileMenu.add(newMenuItem);
        fileMenu.add(openMenuItem);
        fileMenu.add(saveMenuItem);
        fileMenu.add(closeMenuItem);
        JMenu editMenu = new JMenu("Edit");
        JMenuItem undoMenuItem = new JMenuItem("Undo", new ImageIcon(new ImageIcon("undo_icon.png").getImage().getScaledInstance(16, 16, java.awt.Image.SCALE_SMOOTH)));
        JMenuItem redoMenuItem = new JMenuItem("Redo", new ImageIcon(new ImageIcon("redo_icon.png").getImage().getScaledInstance(16, 16, java.awt.Image.SCALE_SMOOTH)));
        JMenuItem cutMenuItem = new JMenuItem("Cut", new ImageIcon(new ImageIcon("cut_icon.png").getImage().getScaledInstance(16, 16, java.awt.Image.SCALE_SMOOTH)));
        JMenuItem copyMenuItem = new JMenuItem("Copy", new ImageIcon(new ImageIcon("copy_icon.png").getImage().getScaledInstance(16, 16, java.awt.Image.SCALE_SMOOTH)));
        JMenuItem pasteMenuItem = new JMenuItem("Paste", new ImageIcon(new ImageIcon("paste_icon.png").getImage().getScaledInstance(16, 16, java.awt.Image.SCALE_SMOOTH)));
        editMenu.add(undoMenuItem);
        editMenu.add(redoMenuItem);
        editMenu.add(cutMenuItem);
        editMenu.add(copyMenuItem);
        editMenu.add(pasteMenuItem);
        JMenu searchMenu = new JMenu("Search");
        menuBar.add(fileMenu);
        menuBar.add(editMenu);
        menuBar.add(searchMenu);
        frame.setJMenuBar(menuBar);
        frame.setVisible(true);
    }
}


import tkinter as tk
from tkinter import ttk
from tkinter import font
def change_font_style():
    selected_font = font_name.get()
    selected_size = str(font_size.get())
    selected_bold = "bold" if font_bold.get() else "normal"
    new_font = (selected_font, selected_size, selected_bold)
    label.config(font=new_font)
root = tk.Tk()
root.title("Label Font Changer")
label = tk.Label(root, text="Hello, tkinter!")
label.pack(pady=20)
font_name_label = tk.Label(root, text="Font Name:")
font_name_label.pack()
font_names = list(font.families())
font_name = ttk.Combobox(root, values=font_names, state="readonly")
font_name.set("Arial")
font_name.pack()
font_size_label = tk.Label(root, text="Font Size:")
font_size_label.pack()
font_size = tk.IntVar()
font_size.set(12)
font_size_entry = tk.Entry(root, textvariable=font_size)
font_size_entry.pack()
font_bold_label = tk.Label(root, text="Font Bold:")
font_bold_label.pack()
font_bold = tk.BooleanVar()
font_bold.set(False)
font_bold_entry = tk.Checkbutton(root, text="Bold", variable=font_bold)
font_bold_entry.pack()
change_font_button = tk.Button(root, text="Change Font Style", command=change_font_style)
change_font_button.pack()
root.mainloop()


import math
class Circle:
    def __init__(self, radius):
        self.radius = radius
    def __add__(self, other):
        if isinstance(other, Circle):
            return Circle(self.radius + other.radius)
        else:
            return NotImplemented
    def area(self):
        return math.pi * self.radius**2
    def display_area(self):
        print(f"Circle with radius {self.radius} has an area of {self.area():.2f}")
radius1 = float(input("Enter the radius of the first circle: "))
radius2 = float(input("Enter the radius of the second circle: "))
circle1 = Circle(radius1)
circle2 = Circle(radius2)
resulting_circle = circle1 + circle2
resulting_circle.display_area()